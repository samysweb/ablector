(set-info :smt-lib-version 2.6)
(set-logic QF_BV)
(set-info :status unsat)
(set-info :category "industrial")
(set-info :source |
  Generated using using the Low-Level Bounded Model Checker LLBMC.
  C files used in the paper: Florian Merz, Stephan Falke, Carsten Sinz: LLBMC: Bounded Model Checking of C and C++ Programs Using a Compiler IR. VSTTE 2012: 146-161
|)
(declare-fun n_0x1e7bed0 () (_ BitVec 32))
;ASSERT n_0x1e7bed0
(assert
(let ((?x1 (_ bv0 32)))
(let ((?x2 (_ bv1 32)))
(let ((?x3 (_ bv2 32)))
(let ((?x4 (_ bv1048576 32)))
(let ((?x5 (_ bv0 64)))
(let ((?x6 (_ bv4 64)))
(let ((?x7 (_ bv8 64)))
(let ((?x8 (_ bv542113792 64)))
(let ((?x9 (_ bv1605369856 64)))
(let ((?x10 (_ bv542113792 64)))
(let ((?x11 (_ bv3221225468 64)))
(let ((?x12 (_ bv3221225471 64)))
(let ((?x13 (_ bv542113792 64)))
(let ((?x14 n_0x1e7bed0))
(let (($x15 (bvsgt ?x14 ?x1)))
(let (($x16 (bvsle ?x14 ?x4)))
(let (($x17 (and $x15 $x16)))
(let ((?x18 ((_ sign_extend 32) ?x14)))
(let ((?x19 (bvmul ?x18 ?x7)))
(let (($x20 (bvugt ?x19 ?x5)))
(let (($x21 (bvule ?x19 ?x9)))
(let (($x22 (and $x20 $x21)))
(let (($x23 (not $x17)))
(let (($x24 (or $x23 $x22)))
(let (($x25 (not $x24)))
(let (($x26 (and $x17 $x22)))
(let ((?x27 (bvmul ?x3 ?x14)))
(let ((?x28 ((_ extract 31 31) ?x3)))
(let ((?x29 ((_ extract 31 31) ?x14)))
(let ((?x30 ((_ sign_extend 31) ?x28)))
(let ((?x31 ((_ sign_extend 31) ?x29)))
(let ((?x32 (bvxor ?x3 ?x30)))
(let ((?x33 (bvxor ?x14 ?x31)))
(let ((?x34 ((_ extract 30 30) ?x33)))
(let ((?x35 ((_ extract 29 29) ?x33)))
(let ((?x36 (bvor ?x34 ?x35)))
(let ((?x37 ((_ extract 28 28) ?x33)))
(let ((?x38 (bvor ?x36 ?x37)))
(let ((?x39 ((_ extract 27 27) ?x33)))
(let ((?x40 (bvor ?x38 ?x39)))
(let ((?x41 ((_ extract 26 26) ?x33)))
(let ((?x42 (bvor ?x40 ?x41)))
(let ((?x43 ((_ extract 25 25) ?x33)))
(let ((?x44 (bvor ?x42 ?x43)))
(let ((?x45 ((_ extract 24 24) ?x33)))
(let ((?x46 (bvor ?x44 ?x45)))
(let ((?x47 ((_ extract 23 23) ?x33)))
(let ((?x48 (bvor ?x46 ?x47)))
(let ((?x49 ((_ extract 22 22) ?x33)))
(let ((?x50 (bvor ?x48 ?x49)))
(let ((?x51 ((_ extract 21 21) ?x33)))
(let ((?x52 (bvor ?x50 ?x51)))
(let ((?x53 ((_ extract 20 20) ?x33)))
(let ((?x54 (bvor ?x52 ?x53)))
(let ((?x55 ((_ extract 19 19) ?x33)))
(let ((?x56 (bvor ?x54 ?x55)))
(let ((?x57 ((_ extract 18 18) ?x33)))
(let ((?x58 (bvor ?x56 ?x57)))
(let ((?x59 ((_ extract 17 17) ?x33)))
(let ((?x60 (bvor ?x58 ?x59)))
(let ((?x61 ((_ extract 16 16) ?x33)))
(let ((?x62 (bvor ?x60 ?x61)))
(let ((?x63 ((_ extract 15 15) ?x33)))
(let ((?x64 (bvor ?x62 ?x63)))
(let ((?x65 ((_ extract 14 14) ?x33)))
(let ((?x66 (bvor ?x64 ?x65)))
(let ((?x67 ((_ extract 13 13) ?x33)))
(let ((?x68 (bvor ?x66 ?x67)))
(let ((?x69 ((_ extract 12 12) ?x33)))
(let ((?x70 (bvor ?x68 ?x69)))
(let ((?x71 ((_ extract 11 11) ?x33)))
(let ((?x72 (bvor ?x70 ?x71)))
(let ((?x73 ((_ extract 10 10) ?x33)))
(let ((?x74 (bvor ?x72 ?x73)))
(let ((?x75 ((_ extract 9 9) ?x33)))
(let ((?x76 (bvor ?x74 ?x75)))
(let ((?x77 ((_ extract 8 8) ?x33)))
(let ((?x78 (bvor ?x76 ?x77)))
(let ((?x79 ((_ extract 7 7) ?x33)))
(let ((?x80 (bvor ?x78 ?x79)))
(let ((?x81 ((_ extract 6 6) ?x33)))
(let ((?x82 (bvor ?x80 ?x81)))
(let ((?x83 ((_ extract 5 5) ?x33)))
(let ((?x84 (bvor ?x82 ?x83)))
(let ((?x85 ((_ extract 4 4) ?x33)))
(let ((?x86 (bvor ?x84 ?x85)))
(let ((?x87 ((_ extract 3 3) ?x33)))
(let ((?x88 (bvor ?x86 ?x87)))
(let ((?x89 ((_ extract 2 2) ?x33)))
(let ((?x90 (bvor ?x88 ?x89)))
(let ((?x91 ((_ extract 1 1) ?x33)))
(let ((?x92 (bvor ?x90 ?x91)))
(let ((?x93 ((_ extract 1 1) ?x32)))
(let ((?x94 (bvand ?x93 ?x34)))
(let ((?x95 ((_ extract 2 2) ?x32)))
(let ((?x96 (bvand ?x95 ?x36)))
(let ((?x97 (bvor ?x94 ?x96)))
(let ((?x98 ((_ extract 3 3) ?x32)))
(let ((?x99 (bvand ?x98 ?x38)))
(let ((?x100 (bvor ?x97 ?x99)))
(let ((?x101 ((_ extract 4 4) ?x32)))
(let ((?x102 (bvand ?x101 ?x40)))
(let ((?x103 (bvor ?x100 ?x102)))
(let ((?x104 ((_ extract 5 5) ?x32)))
(let ((?x105 (bvand ?x104 ?x42)))
(let ((?x106 (bvor ?x103 ?x105)))
(let ((?x107 ((_ extract 6 6) ?x32)))
(let ((?x108 (bvand ?x107 ?x44)))
(let ((?x109 (bvor ?x106 ?x108)))
(let ((?x110 ((_ extract 7 7) ?x32)))
(let ((?x111 (bvand ?x110 ?x46)))
(let ((?x112 (bvor ?x109 ?x111)))
(let ((?x113 ((_ extract 8 8) ?x32)))
(let ((?x114 (bvand ?x113 ?x48)))
(let ((?x115 (bvor ?x112 ?x114)))
(let ((?x116 ((_ extract 9 9) ?x32)))
(let ((?x117 (bvand ?x116 ?x50)))
(let ((?x118 (bvor ?x115 ?x117)))
(let ((?x119 ((_ extract 10 10) ?x32)))
(let ((?x120 (bvand ?x119 ?x52)))
(let ((?x121 (bvor ?x118 ?x120)))
(let ((?x122 ((_ extract 11 11) ?x32)))
(let ((?x123 (bvand ?x122 ?x54)))
(let ((?x124 (bvor ?x121 ?x123)))
(let ((?x125 ((_ extract 12 12) ?x32)))
(let ((?x126 (bvand ?x125 ?x56)))
(let ((?x127 (bvor ?x124 ?x126)))
(let ((?x128 ((_ extract 13 13) ?x32)))
(let ((?x129 (bvand ?x128 ?x58)))
(let ((?x130 (bvor ?x127 ?x129)))
(let ((?x131 ((_ extract 14 14) ?x32)))
(let ((?x132 (bvand ?x131 ?x60)))
(let ((?x133 (bvor ?x130 ?x132)))
(let ((?x134 ((_ extract 15 15) ?x32)))
(let ((?x135 (bvand ?x134 ?x62)))
(let ((?x136 (bvor ?x133 ?x135)))
(let ((?x137 ((_ extract 16 16) ?x32)))
(let ((?x138 (bvand ?x137 ?x64)))
(let ((?x139 (bvor ?x136 ?x138)))
(let ((?x140 ((_ extract 17 17) ?x32)))
(let ((?x141 (bvand ?x140 ?x66)))
(let ((?x142 (bvor ?x139 ?x141)))
(let ((?x143 ((_ extract 18 18) ?x32)))
(let ((?x144 (bvand ?x143 ?x68)))
(let ((?x145 (bvor ?x142 ?x144)))
(let ((?x146 ((_ extract 19 19) ?x32)))
(let ((?x147 (bvand ?x146 ?x70)))
(let ((?x148 (bvor ?x145 ?x147)))
(let ((?x149 ((_ extract 20 20) ?x32)))
(let ((?x150 (bvand ?x149 ?x72)))
(let ((?x151 (bvor ?x148 ?x150)))
(let ((?x152 ((_ extract 21 21) ?x32)))
(let ((?x153 (bvand ?x152 ?x74)))
(let ((?x154 (bvor ?x151 ?x153)))
(let ((?x155 ((_ extract 22 22) ?x32)))
(let ((?x156 (bvand ?x155 ?x76)))
(let ((?x157 (bvor ?x154 ?x156)))
(let ((?x158 ((_ extract 23 23) ?x32)))
(let ((?x159 (bvand ?x158 ?x78)))
(let ((?x160 (bvor ?x157 ?x159)))
(let ((?x161 ((_ extract 24 24) ?x32)))
(let ((?x162 (bvand ?x161 ?x80)))
(let ((?x163 (bvor ?x160 ?x162)))
(let ((?x164 ((_ extract 25 25) ?x32)))
(let ((?x165 (bvand ?x164 ?x82)))
(let ((?x166 (bvor ?x163 ?x165)))
(let ((?x167 ((_ extract 26 26) ?x32)))
(let ((?x168 (bvand ?x167 ?x84)))
(let ((?x169 (bvor ?x166 ?x168)))
(let ((?x170 ((_ extract 27 27) ?x32)))
(let ((?x171 (bvand ?x170 ?x86)))
(let ((?x172 (bvor ?x169 ?x171)))
(let ((?x173 ((_ extract 28 28) ?x32)))
(let ((?x174 (bvand ?x173 ?x88)))
(let ((?x175 (bvor ?x172 ?x174)))
(let ((?x176 ((_ extract 29 29) ?x32)))
(let ((?x177 (bvand ?x176 ?x90)))
(let ((?x178 (bvor ?x175 ?x177)))
(let ((?x179 ((_ extract 30 30) ?x32)))
(let ((?x180 (bvand ?x179 ?x92)))
(let ((?x181 (bvor ?x178 ?x180)))
(let ((?x182 ((_ sign_extend 1) ?x3)))
(let ((?x183 ((_ sign_extend 1) ?x14)))
(let ((?x184 (bvmul ?x182 ?x183)))
(let ((?x185 ((_ extract 32 32) ?x184)))
(let ((?x186 ((_ extract 31 31) ?x184)))
(let ((?x187 (bvxor ?x185 ?x186)))
(let ((?x188 (bvor ?x181 ?x187)))
(let (($x189 (= ?x188 (_ bv1 1))))
(let (($x190 (not $x189)))
(let (($x191 (not $x26)))
(let (($x192 (or $x191 $x190)))
(let (($x193 (not $x192)))
(let (($x194 (or $x25 $x193)))
(let (($x195 (and $x26 $x190)))
(let ((?x196 (bvsub ?x27 ?x2)))
(let ((?x197 ((_ extract 31 31) ?x27)))
(let ((?x198 ((_ extract 31 31) ?x2)))
(let ((?x199 (bvnot ?x197)))
(let ((?x200 (bvnot ?x198)))
(let ((?x201 (bvsub ?x27 ?x2)))
(let ((?x202 ((_ extract 31 31) ?x201)))
(let ((?x203 (bvnot ?x202)))
(let ((?x204 (bvand ?x199 ?x198)))
(let ((?x205 (bvand ?x204 ?x202)))
(let ((?x206 (bvand ?x197 ?x200)))
(let ((?x207 (bvand ?x206 ?x203)))
(let ((?x208 (bvor ?x205 ?x207)))
(let (($x209 (= ?x208 (_ bv1 1))))
(let (($x210 (not $x209)))
(let (($x211 (not $x195)))
(let (($x212 (or $x211 $x210)))
(let (($x213 (not $x212)))
(let (($x214 (or $x194 $x213)))
(let (($x215 (and $x195 $x210)))
(let ((?x216 ((_ sign_extend 32) ?x196)))
(let ((?x217 (_ bv4 64)))
(let ((?x218 (bvmul ?x217 ?x216)))
(let ((?x219 (bvadd ?x13 ?x218)))
(let (($x220 (bvule ?x10 ?x219)))
(let ((?x221 (bvadd ?x8 ?x19)))
(let ((?x222 (bvadd ?x219 ?x6)))
(let (($x223 (bvule ?x222 ?x221)))
(let (($x224 (and $x220 $x223)))
(let (($x225 (and $x17 $x224)))
(let (($x226 (bvult ?x12 ?x219)))
(let (($x227 (bvule ?x219 ?x11)))
(let (($x228 (and $x226 $x227)))
(let (($x229 (or $x225 $x228)))
(let ((?x230 ((_ zero_extend 1) ?x219)))
(let ((?x231 ((_ zero_extend 1) ?x6)))
(let ((?x232 (bvadd ?x230 ?x231)))
(let ((?x233 ((_ extract 64 64) ?x232)))
(let (($x234 (= ?x233 (_ bv1 1))))
(let (($x235 (not $x234)))
(let (($x236 (and $x229 $x235)))
(let (($x237 (not $x215)))
(let (($x238 (or $x237 $x236)))
(let (($x239 (not $x238)))
(let (($x240 (or $x214 $x239)))
$x240
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
)
(check-sat)