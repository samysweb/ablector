(set-info :smt-lib-version 2.6)
(set-logic QF_BV)
(set-info :source |
John Matthews (matthews@galois.com)
Levent Erkok  (levent.erkok@galois.com)

This directory contains benchmark equivalence checking formulas in the
SMT-Lib format. The benchmarks are checking whether an algorithm for
computing modular multiplication by interleaving the multiplication and
residue calculations, is equivalent to an algorithm that first multiplies
the two inputs, and then performs the residue calculation on the result.
|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun i0 () (_ BitVec 4))
(declare-fun i1 () (_ BitVec 4))
(declare-fun i2 () (_ BitVec 4))
(declare-fun v3 () (_ BitVec 1))
(assert (= v3 (ite (bvult (_ bv0 4) i0) (_ bv1 1) (_ bv0 1))))
(declare-fun v4 () (_ BitVec 1))
(assert (= v4 (ite (bvult i1 i0) (_ bv1 1) (_ bv0 1))))
(declare-fun v5 () (_ BitVec 1))
(assert (= v5 (bvand v3 v4)))
(declare-fun v6 () (_ BitVec 1))
(assert (= v6 ((_ extract 0 0) i2)))
(declare-fun v7 () (_ BitVec 1))
(assert (= v7 ((_ extract 1 1) i2)))
(declare-fun v8 () (_ BitVec 1))
(assert (= v8 ((_ extract 2 2) i2)))
(declare-fun v9 () (_ BitVec 1))
(assert (= v9 ((_ extract 3 3) i2)))
(declare-fun v10 () (_ BitVec 2))
(assert (= v10 (concat v8 v9)))
(declare-fun v11 () (_ BitVec 2))
(assert (= v11 (concat v6 v7)))
(declare-fun v12 () (_ BitVec 4))
(assert (= v12 (concat v11 v10)))
(declare-fun v13 () (_ BitVec 1))
(assert (= v13 ((_ extract 0 0) v12)))
(declare-fun v14 () (_ BitVec 1))
(assert (= v14 ((_ extract 1 1) v12)))
(declare-fun v15 () (_ BitVec 1))
(assert (= v15 ((_ extract 2 2) v12)))
(declare-fun v16 () (_ BitVec 1))
(assert (= v16 ((_ extract 3 3) v12)))
(declare-fun v17 () (_ BitVec 6))
(assert (= v17 ((_ zero_extend 2) i1)))
(declare-fun v18 () (_ BitVec 6))
(assert (= v18 ((_ zero_extend 2) i0)))
(declare-fun v19 () (_ BitVec 1))
(assert (= v19 (ite (bvult v17 v18) (_ bv1 1) (_ bv0 1))))
(declare-fun v20 () (_ BitVec 4))
(assert (= v20 ((_ extract 3 0) v17)))
(declare-fun v21 () (_ BitVec 6))
(assert (= v21 (bvsub v17 v18)))
(declare-fun v22 () (_ BitVec 1))
(assert (= v22 (ite (bvult v21 v18) (_ bv1 1) (_ bv0 1))))
(declare-fun v23 () (_ BitVec 4))
(assert (= v23 ((_ extract 3 0) v21)))
(declare-fun v24 () (_ BitVec 6))
(assert (= v24 (bvsub v21 v18)))
(declare-fun v25 () (_ BitVec 4))
(assert (= v25 ((_ extract 3 0) v24)))
(declare-fun v26 () (_ BitVec 4))
(assert (= v26 (ite (= v22 (_ bv1 1)) v23 v25)))
(declare-fun v27 () (_ BitVec 4))
(assert (= v27 (ite (= v19 (_ bv1 1)) v20 v26)))
(declare-fun v28 () (_ BitVec 5))
(assert (= v28 ((_ zero_extend 1) i0)))
(declare-fun v29 () (_ BitVec 1))
(assert (= v29 (ite (bvult (_ bv0 5) v28) (_ bv1 1) (_ bv0 1))))
(declare-fun v30 () (_ BitVec 5))
(assert (= v30 (bvsub (_ bv0 5) v28)))
(declare-fun v31 () (_ BitVec 4))
(assert (= v31 ((_ extract 3 0) v30)))
(declare-fun v32 () (_ BitVec 4))
(assert (= v32 (ite (= v29 (_ bv1 1)) (_ bv0 4) v31)))
(declare-fun v33 () (_ BitVec 4))
(assert (= v33 (ite (= v13 (_ bv1 1)) v27 v32)))
(declare-fun v34 () (_ BitVec 5))
(assert (= v34 (concat v33 (_ bv0 1))))
(declare-fun v35 () (_ BitVec 6))
(assert (= v35 ((_ zero_extend 1) v34)))
(declare-fun v36 () (_ BitVec 6))
(assert (= v36 (bvadd v17 v35)))
(declare-fun v37 () (_ BitVec 1))
(assert (= v37 (ite (bvult v36 v18) (_ bv1 1) (_ bv0 1))))
(declare-fun v38 () (_ BitVec 4))
(assert (= v38 ((_ extract 3 0) v36)))
(declare-fun v39 () (_ BitVec 6))
(assert (= v39 (bvsub v36 v18)))
(declare-fun v40 () (_ BitVec 1))
(assert (= v40 (ite (bvult v39 v18) (_ bv1 1) (_ bv0 1))))
(declare-fun v41 () (_ BitVec 4))
(assert (= v41 ((_ extract 3 0) v39)))
(declare-fun v42 () (_ BitVec 6))
(assert (= v42 (bvsub v39 v18)))
(declare-fun v43 () (_ BitVec 4))
(assert (= v43 ((_ extract 3 0) v42)))
(declare-fun v44 () (_ BitVec 4))
(assert (= v44 (ite (= v40 (_ bv1 1)) v41 v43)))
(declare-fun v45 () (_ BitVec 4))
(assert (= v45 (ite (= v37 (_ bv1 1)) v38 v44)))
(declare-fun v46 () (_ BitVec 1))
(assert (= v46 (ite (bvult v34 v28) (_ bv1 1) (_ bv0 1))))
(declare-fun v47 () (_ BitVec 4))
(assert (= v47 ((_ extract 3 0) v34)))
(declare-fun v48 () (_ BitVec 5))
(assert (= v48 (bvsub v34 v28)))
(declare-fun v49 () (_ BitVec 4))
(assert (= v49 ((_ extract 3 0) v48)))
(declare-fun v50 () (_ BitVec 4))
(assert (= v50 (ite (= v46 (_ bv1 1)) v47 v49)))
(declare-fun v51 () (_ BitVec 4))
(assert (= v51 (ite (= v14 (_ bv1 1)) v45 v50)))
(declare-fun v52 () (_ BitVec 5))
(assert (= v52 (concat v51 (_ bv0 1))))
(declare-fun v53 () (_ BitVec 6))
(assert (= v53 ((_ zero_extend 1) v52)))
(declare-fun v54 () (_ BitVec 6))
(assert (= v54 (bvadd v17 v53)))
(declare-fun v55 () (_ BitVec 1))
(assert (= v55 (ite (bvult v54 v18) (_ bv1 1) (_ bv0 1))))
(declare-fun v56 () (_ BitVec 4))
(assert (= v56 ((_ extract 3 0) v54)))
(declare-fun v57 () (_ BitVec 6))
(assert (= v57 (bvsub v54 v18)))
(declare-fun v58 () (_ BitVec 1))
(assert (= v58 (ite (bvult v57 v18) (_ bv1 1) (_ bv0 1))))
(declare-fun v59 () (_ BitVec 4))
(assert (= v59 ((_ extract 3 0) v57)))
(declare-fun v60 () (_ BitVec 6))
(assert (= v60 (bvsub v57 v18)))
(declare-fun v61 () (_ BitVec 4))
(assert (= v61 ((_ extract 3 0) v60)))
(declare-fun v62 () (_ BitVec 4))
(assert (= v62 (ite (= v58 (_ bv1 1)) v59 v61)))
(declare-fun v63 () (_ BitVec 4))
(assert (= v63 (ite (= v55 (_ bv1 1)) v56 v62)))
(declare-fun v64 () (_ BitVec 1))
(assert (= v64 (ite (bvult v52 v28) (_ bv1 1) (_ bv0 1))))
(declare-fun v65 () (_ BitVec 4))
(assert (= v65 ((_ extract 3 0) v52)))
(declare-fun v66 () (_ BitVec 5))
(assert (= v66 (bvsub v52 v28)))
(declare-fun v67 () (_ BitVec 4))
(assert (= v67 ((_ extract 3 0) v66)))
(declare-fun v68 () (_ BitVec 4))
(assert (= v68 (ite (= v64 (_ bv1 1)) v65 v67)))
(declare-fun v69 () (_ BitVec 4))
(assert (= v69 (ite (= v15 (_ bv1 1)) v63 v68)))
(declare-fun v70 () (_ BitVec 5))
(assert (= v70 (concat v69 (_ bv0 1))))
(declare-fun v71 () (_ BitVec 6))
(assert (= v71 ((_ zero_extend 1) v70)))
(declare-fun v72 () (_ BitVec 6))
(assert (= v72 (bvadd v17 v71)))
(declare-fun v73 () (_ BitVec 1))
(assert (= v73 (ite (bvult v72 v18) (_ bv1 1) (_ bv0 1))))
(declare-fun v74 () (_ BitVec 4))
(assert (= v74 ((_ extract 3 0) v72)))
(declare-fun v75 () (_ BitVec 6))
(assert (= v75 (bvsub v72 v18)))
(declare-fun v76 () (_ BitVec 1))
(assert (= v76 (ite (bvult v75 v18) (_ bv1 1) (_ bv0 1))))
(declare-fun v77 () (_ BitVec 4))
(assert (= v77 ((_ extract 3 0) v75)))
(declare-fun v78 () (_ BitVec 6))
(assert (= v78 (bvsub v75 v18)))
(declare-fun v79 () (_ BitVec 4))
(assert (= v79 ((_ extract 3 0) v78)))
(declare-fun v80 () (_ BitVec 4))
(assert (= v80 (ite (= v76 (_ bv1 1)) v77 v79)))
(declare-fun v81 () (_ BitVec 4))
(assert (= v81 (ite (= v73 (_ bv1 1)) v74 v80)))
(declare-fun v82 () (_ BitVec 1))
(assert (= v82 (ite (bvult v70 v28) (_ bv1 1) (_ bv0 1))))
(declare-fun v83 () (_ BitVec 4))
(assert (= v83 ((_ extract 3 0) v70)))
(declare-fun v84 () (_ BitVec 5))
(assert (= v84 (bvsub v70 v28)))
(declare-fun v85 () (_ BitVec 4))
(assert (= v85 ((_ extract 3 0) v84)))
(declare-fun v86 () (_ BitVec 4))
(assert (= v86 (ite (= v82 (_ bv1 1)) v83 v85)))
(declare-fun v87 () (_ BitVec 4))
(assert (= v87 (ite (= v16 (_ bv1 1)) v81 v86)))
(declare-fun v88 () (_ BitVec 1))
(assert (= v88 (ite (= i0 (_ bv0 4)) (_ bv1 1) (_ bv0 1))))
(declare-fun v89 () (_ BitVec 1))
(assert (= v89 (bvnot v88)))
(declare-fun v90 () (_ BitVec 8))
(assert (= v90 ((_ zero_extend 4) i1)))
(declare-fun v91 () (_ BitVec 8))
(assert (= v91 ((_ zero_extend 4) i2)))
(declare-fun v92 () (_ BitVec 8))
(assert (= v92 (bvmul v90 v91)))
(declare-fun v93 () (_ BitVec 8))
(assert (= v93 ((_ zero_extend 4) i0)))
(declare-fun v94 () (_ BitVec 8))
(assert (= v94 (bvurem v92 v93)))
(declare-fun v95 () (_ BitVec 4))
(assert (= v95 ((_ extract 3 0) v94)))
(declare-fun v96 () (_ BitVec 4))
(assert (= v96 ((_ extract 7 4) v92)))
(declare-fun v97 () (_ BitVec 1))
(assert (= v97 (ite (= v96 (_ bv0 4)) (_ bv1 1) (_ bv0 1))))
(declare-fun v98 () (_ BitVec 4))
(assert (= v98 ((_ extract 3 0) v92)))
(declare-fun v99 () (_ BitVec 4))
(assert (= v99 (ite (= v97 (_ bv1 1)) v98 (_ bv0 4))))
(declare-fun v100 () (_ BitVec 4))
(assert (= v100 (ite (= v89 (_ bv1 1)) v95 v99)))
(declare-fun v101 () (_ BitVec 1))
(assert (= v101 (ite (= v87 v100) (_ bv1 1) (_ bv0 1))))
(declare-fun v102 () (_ BitVec 1))
(assert (= v102 (ite (= v5 (_ bv1 1)) v101 (_ bv1 1))))
(assert (let ((?v_0 (= v5 (_ bv1 1)))) (not (and (= v102 (_ bv1 1)) (=> (and ?v_0 (= v89 (_ bv1 1))) (not (= v93 (_ bv0 8)))) (not (and ?v_0 (= v89 (_ bv0 1)) (= v97 (_ bv0 1))))))))
(check-sat)
(exit)
