(set-info :smt-lib-version 2.6)
(set-logic QF_BV)
(set-info :source |
Integer cube root algorithm icbrt(x), where x is an unsigned 32 bit integer.
From the book "Hacker's delight" by Henry S. Warren, Jr., page 212

We try to show the invalid verification condition:
y^3 == x or (y^3 < x and (y+1)^3 > x) holds, where y is the result.

Contributed by Robert Brummayer (robert.brummayer@gmail.com)
|)
(set-info :category "crafted")
(set-info :status sat)
(declare-fun x () (_ BitVec 32))
;ASSERT x
(assert (let ((?v_0 (bvmul (_ bv0 32) (_ bv2 32)))) (let ((?v_1 (bvadd ?v_0 (_ bv1 32)))) (let ((?v_4 (bvshl (bvadd (bvmul (bvmul ?v_0 (_ bv3 32)) ?v_1) (_ bv1 32)) ((_ zero_extend 27) (_ bv30 5)))) (?v_7 (bvsub (_ bv30 5) (_ bv3 5)))) (let ((?v_3 (= (_ bv1 1) (ite (bvule ?v_4 x) (_ bv1 1) (_ bv0 1))))) (let ((?v_9 (ite ?v_3 (bvsub x ?v_4) x)) (?v_2 (bvmul (ite ?v_3 ?v_1 ?v_0) (_ bv2 32)))) (let ((?v_5 (bvadd ?v_2 (_ bv1 32)))) (let ((?v_10 (bvshl (bvadd (bvmul (bvmul ?v_2 (_ bv3 32)) ?v_5) (_ bv1 32)) ((_ zero_extend 27) ?v_7))) (?v_13 (bvsub ?v_7 (_ bv3 5)))) (let ((?v_8 (= (_ bv1 1) (ite (bvule ?v_10 ?v_9) (_ bv1 1) (_ bv0 1))))) (let ((?v_15 (ite ?v_8 (bvsub ?v_9 ?v_10) ?v_9)) (?v_6 (bvmul (ite ?v_8 ?v_5 ?v_2) (_ bv2 32)))) (let ((?v_11 (bvadd ?v_6 (_ bv1 32)))) (let ((?v_16 (bvshl (bvadd (bvmul (bvmul ?v_6 (_ bv3 32)) ?v_11) (_ bv1 32)) ((_ zero_extend 27) ?v_13))) (?v_19 (bvsub ?v_13 (_ bv3 5)))) (let ((?v_14 (= (_ bv1 1) (ite (bvule ?v_16 ?v_15) (_ bv1 1) (_ bv0 1))))) (let ((?v_21 (ite ?v_14 (bvsub ?v_15 ?v_16) ?v_15)) (?v_12 (bvmul (ite ?v_14 ?v_11 ?v_6) (_ bv2 32)))) (let ((?v_17 (bvadd ?v_12 (_ bv1 32)))) (let ((?v_22 (bvshl (bvadd (bvmul (bvmul ?v_12 (_ bv3 32)) ?v_17) (_ bv1 32)) ((_ zero_extend 27) ?v_19))) (?v_25 (bvsub ?v_19 (_ bv3 5)))) (let ((?v_20 (= (_ bv1 1) (ite (bvule ?v_22 ?v_21) (_ bv1 1) (_ bv0 1))))) (let ((?v_27 (ite ?v_20 (bvsub ?v_21 ?v_22) ?v_21)) (?v_18 (bvmul (ite ?v_20 ?v_17 ?v_12) (_ bv2 32)))) (let ((?v_23 (bvadd ?v_18 (_ bv1 32)))) (let ((?v_28 (bvshl (bvadd (bvmul (bvmul ?v_18 (_ bv3 32)) ?v_23) (_ bv1 32)) ((_ zero_extend 27) ?v_25))) (?v_31 (bvsub ?v_25 (_ bv3 5)))) (let ((?v_26 (= (_ bv1 1) (ite (bvule ?v_28 ?v_27) (_ bv1 1) (_ bv0 1))))) (let ((?v_33 (ite ?v_26 (bvsub ?v_27 ?v_28) ?v_27)) (?v_24 (bvmul (ite ?v_26 ?v_23 ?v_18) (_ bv2 32)))) (let ((?v_29 (bvadd ?v_24 (_ bv1 32)))) (let ((?v_34 (bvshl (bvadd (bvmul (bvmul ?v_24 (_ bv3 32)) ?v_29) (_ bv1 32)) ((_ zero_extend 27) ?v_31))) (?v_37 (bvsub ?v_31 (_ bv3 5)))) (let ((?v_32 (= (_ bv1 1) (ite (bvule ?v_34 ?v_33) (_ bv1 1) (_ bv0 1))))) (let ((?v_39 (ite ?v_32 (bvsub ?v_33 ?v_34) ?v_33)) (?v_30 (bvmul (ite ?v_32 ?v_29 ?v_24) (_ bv2 32)))) (let ((?v_35 (bvadd ?v_30 (_ bv1 32)))) (let ((?v_40 (bvshl (bvadd (bvmul (bvmul ?v_30 (_ bv3 32)) ?v_35) (_ bv1 32)) ((_ zero_extend 27) ?v_37))) (?v_43 (bvsub ?v_37 (_ bv3 5)))) (let ((?v_38 (= (_ bv1 1) (ite (bvule ?v_40 ?v_39) (_ bv1 1) (_ bv0 1))))) (let ((?v_45 (ite ?v_38 (bvsub ?v_39 ?v_40) ?v_39)) (?v_36 (bvmul (ite ?v_38 ?v_35 ?v_30) (_ bv2 32)))) (let ((?v_41 (bvadd ?v_36 (_ bv1 32)))) (let ((?v_46 (bvshl (bvadd (bvmul (bvmul ?v_36 (_ bv3 32)) ?v_41) (_ bv1 32)) ((_ zero_extend 27) ?v_43))) (?v_49 (bvsub ?v_43 (_ bv3 5)))) (let ((?v_44 (= (_ bv1 1) (ite (bvule ?v_46 ?v_45) (_ bv1 1) (_ bv0 1))))) (let ((?v_51 (ite ?v_44 (bvsub ?v_45 ?v_46) ?v_45)) (?v_42 (bvmul (ite ?v_44 ?v_41 ?v_36) (_ bv2 32)))) (let ((?v_47 (bvadd ?v_42 (_ bv1 32)))) (let ((?v_52 (bvshl (bvadd (bvmul (bvmul ?v_42 (_ bv3 32)) ?v_47) (_ bv1 32)) ((_ zero_extend 27) ?v_49))) (?v_55 (bvsub ?v_49 (_ bv3 5)))) (let ((?v_50 (= (_ bv1 1) (ite (bvule ?v_52 ?v_51) (_ bv1 1) (_ bv0 1))))) (let ((?v_57 (ite ?v_50 (bvsub ?v_51 ?v_52) ?v_51)) (?v_48 (bvmul (ite ?v_50 ?v_47 ?v_42) (_ bv2 32)))) (let ((?v_53 (bvadd ?v_48 (_ bv1 32)))) (let ((?v_58 (bvshl (bvadd (bvmul (bvmul ?v_48 (_ bv3 32)) ?v_53) (_ bv1 32)) ((_ zero_extend 27) ?v_55)))) (let ((?v_56 (= (_ bv1 1) (ite (bvule ?v_58 ?v_57) (_ bv1 1) (_ bv0 1))))) (let ((?v_54 (bvmul (ite ?v_56 ?v_53 ?v_48) (_ bv2 32)))) (let ((?v_59 (bvadd ?v_54 (_ bv1 32)))) (let ((?v_60 (ite (= (_ bv1 1) (ite (bvule (bvshl (bvadd (bvmul (bvmul ?v_54 (_ bv3 32)) ?v_59) (_ bv1 32)) ((_ zero_extend 27) (bvsub ?v_55 (_ bv3 5)))) (ite ?v_56 (bvsub ?v_57 ?v_58) ?v_57)) (_ bv1 1) (_ bv0 1))) ?v_59 ?v_54))) (let ((?v_61 (bvmul (bvmul ?v_60 ?v_60) ?v_60)) (?v_62 (bvadd ?v_60 (_ bv1 32)))) (not (= (bvnot (bvor (ite (= x ?v_61) (_ bv1 1) (_ bv0 1)) (bvand (ite (bvult ?v_61 x) (_ bv1 1) (_ bv0 1)) (ite (bvult x (bvmul (bvmul ?v_62 ?v_62) ?v_62)) (_ bv1 1) (_ bv0 1))))) (_ bv0 1))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
;(exit)
