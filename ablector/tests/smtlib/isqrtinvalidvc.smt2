(set-info :smt-lib-version 2.6)
(set-logic QF_BV)
(set-info :source |
Integer square root algorithm isqrt(x), where x is an unsigned 32 bit integer.
From the book "Hacker's delight" by Henry S. Warren, Jr., page 210

We try to show the invalid verification condition:
y^2 == x or (y^2 < x and (y+1)^2 > x), where y is the result.

Contributed by Robert Brummayer (robert.brummayer@gmail.com)
|)
(set-info :category "crafted")
(set-info :status sat)
(declare-fun x () (_ BitVec 32))
(assert (let ((?v_2 (bvor (_ bv0 32) (_ bv1073741824 32))) (?v_4 ((_ zero_extend 27) (_ bv1 5)))) (let ((?v_0 (bvlshr (_ bv0 32) ?v_4)) (?v_1 (= (_ bv1 1) (ite (bvule ?v_2 x) (_ bv1 1) (_ bv0 1))))) (let ((?v_9 (ite ?v_1 (bvsub x ?v_2) x)) (?v_3 (ite ?v_1 (bvor ?v_0 (_ bv1073741824 32)) ?v_0)) (?v_7 ((_ zero_extend 27) (_ bv2 5)))) (let ((?v_5 (bvlshr (_ bv1073741824 32) ?v_7))) (let ((?v_10 (bvor ?v_3 ?v_5)) (?v_6 (bvlshr ?v_3 ?v_4))) (let ((?v_8 (= (_ bv1 1) (ite (bvule ?v_10 ?v_9) (_ bv1 1) (_ bv0 1))))) (let ((?v_15 (ite ?v_8 (bvsub ?v_9 ?v_10) ?v_9)) (?v_11 (ite ?v_8 (bvor ?v_6 ?v_5) ?v_6)) (?v_12 (bvlshr ?v_5 ?v_7))) (let ((?v_16 (bvor ?v_11 ?v_12)) (?v_13 (bvlshr ?v_11 ?v_4))) (let ((?v_14 (= (_ bv1 1) (ite (bvule ?v_16 ?v_15) (_ bv1 1) (_ bv0 1))))) (let ((?v_21 (ite ?v_14 (bvsub ?v_15 ?v_16) ?v_15)) (?v_17 (ite ?v_14 (bvor ?v_13 ?v_12) ?v_13)) (?v_18 (bvlshr ?v_12 ?v_7))) (let ((?v_22 (bvor ?v_17 ?v_18)) (?v_19 (bvlshr ?v_17 ?v_4))) (let ((?v_20 (= (_ bv1 1) (ite (bvule ?v_22 ?v_21) (_ bv1 1) (_ bv0 1))))) (let ((?v_27 (ite ?v_20 (bvsub ?v_21 ?v_22) ?v_21)) (?v_23 (ite ?v_20 (bvor ?v_19 ?v_18) ?v_19)) (?v_24 (bvlshr ?v_18 ?v_7))) (let ((?v_28 (bvor ?v_23 ?v_24)) (?v_25 (bvlshr ?v_23 ?v_4))) (let ((?v_26 (= (_ bv1 1) (ite (bvule ?v_28 ?v_27) (_ bv1 1) (_ bv0 1))))) (let ((?v_33 (ite ?v_26 (bvsub ?v_27 ?v_28) ?v_27)) (?v_29 (ite ?v_26 (bvor ?v_25 ?v_24) ?v_25)) (?v_30 (bvlshr ?v_24 ?v_7))) (let ((?v_34 (bvor ?v_29 ?v_30)) (?v_31 (bvlshr ?v_29 ?v_4))) (let ((?v_32 (= (_ bv1 1) (ite (bvule ?v_34 ?v_33) (_ bv1 1) (_ bv0 1))))) (let ((?v_39 (ite ?v_32 (bvsub ?v_33 ?v_34) ?v_33)) (?v_35 (ite ?v_32 (bvor ?v_31 ?v_30) ?v_31)) (?v_36 (bvlshr ?v_30 ?v_7))) (let ((?v_40 (bvor ?v_35 ?v_36)) (?v_37 (bvlshr ?v_35 ?v_4))) (let ((?v_38 (= (_ bv1 1) (ite (bvule ?v_40 ?v_39) (_ bv1 1) (_ bv0 1))))) (let ((?v_45 (ite ?v_38 (bvsub ?v_39 ?v_40) ?v_39)) (?v_41 (ite ?v_38 (bvor ?v_37 ?v_36) ?v_37)) (?v_42 (bvlshr ?v_36 ?v_7))) (let ((?v_46 (bvor ?v_41 ?v_42)) (?v_43 (bvlshr ?v_41 ?v_4))) (let ((?v_44 (= (_ bv1 1) (ite (bvule ?v_46 ?v_45) (_ bv1 1) (_ bv0 1))))) (let ((?v_51 (ite ?v_44 (bvsub ?v_45 ?v_46) ?v_45)) (?v_47 (ite ?v_44 (bvor ?v_43 ?v_42) ?v_43)) (?v_48 (bvlshr ?v_42 ?v_7))) (let ((?v_52 (bvor ?v_47 ?v_48)) (?v_49 (bvlshr ?v_47 ?v_4))) (let ((?v_50 (= (_ bv1 1) (ite (bvule ?v_52 ?v_51) (_ bv1 1) (_ bv0 1))))) (let ((?v_57 (ite ?v_50 (bvsub ?v_51 ?v_52) ?v_51)) (?v_53 (ite ?v_50 (bvor ?v_49 ?v_48) ?v_49)) (?v_54 (bvlshr ?v_48 ?v_7))) (let ((?v_58 (bvor ?v_53 ?v_54)) (?v_55 (bvlshr ?v_53 ?v_4))) (let ((?v_56 (= (_ bv1 1) (ite (bvule ?v_58 ?v_57) (_ bv1 1) (_ bv0 1))))) (let ((?v_63 (ite ?v_56 (bvsub ?v_57 ?v_58) ?v_57)) (?v_59 (ite ?v_56 (bvor ?v_55 ?v_54) ?v_55)) (?v_60 (bvlshr ?v_54 ?v_7))) (let ((?v_64 (bvor ?v_59 ?v_60)) (?v_61 (bvlshr ?v_59 ?v_4))) (let ((?v_62 (= (_ bv1 1) (ite (bvule ?v_64 ?v_63) (_ bv1 1) (_ bv0 1))))) (let ((?v_69 (ite ?v_62 (bvsub ?v_63 ?v_64) ?v_63)) (?v_65 (ite ?v_62 (bvor ?v_61 ?v_60) ?v_61)) (?v_66 (bvlshr ?v_60 ?v_7))) (let ((?v_70 (bvor ?v_65 ?v_66)) (?v_67 (bvlshr ?v_65 ?v_4))) (let ((?v_68 (= (_ bv1 1) (ite (bvule ?v_70 ?v_69) (_ bv1 1) (_ bv0 1))))) (let ((?v_75 (ite ?v_68 (bvsub ?v_69 ?v_70) ?v_69)) (?v_71 (ite ?v_68 (bvor ?v_67 ?v_66) ?v_67)) (?v_72 (bvlshr ?v_66 ?v_7))) (let ((?v_76 (bvor ?v_71 ?v_72)) (?v_73 (bvlshr ?v_71 ?v_4))) (let ((?v_74 (= (_ bv1 1) (ite (bvule ?v_76 ?v_75) (_ bv1 1) (_ bv0 1))))) (let ((?v_81 (ite ?v_74 (bvsub ?v_75 ?v_76) ?v_75)) (?v_77 (ite ?v_74 (bvor ?v_73 ?v_72) ?v_73)) (?v_78 (bvlshr ?v_72 ?v_7))) (let ((?v_82 (bvor ?v_77 ?v_78)) (?v_79 (bvlshr ?v_77 ?v_4))) (let ((?v_80 (= (_ bv1 1) (ite (bvule ?v_82 ?v_81) (_ bv1 1) (_ bv0 1))))) (let ((?v_87 (ite ?v_80 (bvsub ?v_81 ?v_82) ?v_81)) (?v_83 (ite ?v_80 (bvor ?v_79 ?v_78) ?v_79)) (?v_84 (bvlshr ?v_78 ?v_7))) (let ((?v_88 (bvor ?v_83 ?v_84)) (?v_85 (bvlshr ?v_83 ?v_4))) (let ((?v_86 (= (_ bv1 1) (ite (bvule ?v_88 ?v_87) (_ bv1 1) (_ bv0 1))))) (let ((?v_89 (ite ?v_86 (bvor ?v_85 ?v_84) ?v_85)) (?v_90 (bvlshr ?v_84 ?v_7))) (let ((?v_91 (bvlshr ?v_89 ?v_4))) (let ((?v_92 (ite (= (_ bv1 1) (ite (bvule (bvor ?v_89 ?v_90) (ite ?v_86 (bvsub ?v_87 ?v_88) ?v_87)) (_ bv1 1) (_ bv0 1))) (bvor ?v_91 ?v_90) ?v_91))) (let ((?v_93 (bvmul ?v_92 ?v_92)) (?v_94 (bvadd ?v_92 (_ bv1 32)))) (not (= (bvnot (bvor (ite (= x ?v_93) (_ bv1 1) (_ bv0 1)) (bvand (ite (bvult ?v_93 x) (_ bv1 1) (_ bv0 1)) (ite (bvult x (bvmul ?v_94 ?v_94)) (_ bv1 1) (_ bv0 1))))) (_ bv0 1)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
